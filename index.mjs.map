{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes an unbiased sample covariance.\n*\n* ## Method\n*\n* -   We begin by defining the co-moment \\\\(C_n\\\\)\n*\n*     ```tex\n*     C_n = \\sum_{i=1}^{N} ( x_i - \\bar{x}_n ) ( y_i - \\bar{y}_n )\n*     ```\n*\n*     where \\\\(\\bar{x}_n\\\\) and \\\\(\\bar{y}_n\\\\) are the sample means for \\\\(x\\\\) and \\\\(y\\\\), respectively.\n*\n* -   Based on Welford's method, we know the update formulas for the sample means are given by\n*\n*     ```tex\n*     \\bar{x}_n = \\bar{x}_{n-1} + \\frac{x_n - \\bar{x}_{n-1}}{n}\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\bar{y}_n = \\bar{y}_{n-1} + \\frac{y_n - \\bar{y}_{n-1}}{n}\n*     ```\n*\n* -   Substituting into the equation for \\\\(C_n\\\\) and rearranging terms\n*\n*     ```tex\n*     C_n = C_{n-1} + (x_n - \\bar{x}_n) (y_n - \\bar{y}_{n-1})\n*     ```\n*\n*     where the apparent asymmetry arises from\n*\n*     ```tex\n*     x_n - \\bar{x}_n = \\frac{n-1}{n} (x_n - \\bar{x}_{n-1})\n*     ```\n*\n*     and, hence, the update term can be equivalently expressed\n*\n*     ```tex\n*     \\frac{n-1}{n} (x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_{n-1})\n*     ```\n*\n* -   The covariance can be defined\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{cov}_n(x,y) &= \\frac{C_n}{n} \\\\\n*     &= \\frac{C_{n-1} + (x_n - \\bar{x}_n) (y_n - \\bar{y}_{n-1})}{n} \\\\\n*     &= \\frac{(n-1)\\operatorname{cov}_{n-1}(x,y) + (x_n - \\bar{x}_n) (y_n - \\bar{y}_{n-1})}{n}\n*     \\end{align*}\n*     ```\n*\n* -   Applying Bessel's correction, we arrive at an update formula for calculating an unbiased sample covariance\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{cov}_n(x,y) &= \\frac{n}{n-1}\\cdot\\frac{(n-1)\\operatorname{cov}_{n-1}(x,y) + (x_n - \\bar{x}_n) (y_n - \\bar{y}_{n-1})}{n} \\\\\n*     &= \\operatorname{cov}_{n-1}(x,y) + \\frac{(x_n - \\bar{x}_n) (y_n - \\bar{y}_{n-1})}{n-1} \\\\\n*     &= \\frac{C_{n-1} + (x_n - \\bar{x}_n) (y_n - \\bar{y}_{n-1})}{n-1}\n*     &= \\frac{C_{n-1} + (x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_n)}{n-1}\n*     \\end{align*}\n*     ```\n*\n* @param {number} [meanx] - mean value\n* @param {number} [meany] - mean value\n* @throws {TypeError} first argument must be a number\n* @throws {TypeError} second argument must be a number\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrcovariance();\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0, 1.0 );\n* // returns 0.0\n*\n* v = accumulator( -5.0, 3.14 );\n* // returns ~-7.49\n*\n* v = accumulator();\n* // returns ~-7.49\n*\n* @example\n* var accumulator = incrcovariance( 2.0, -3.0 );\n*/\nfunction incrcovariance( meanx, meany ) {\n\tvar dx;\n\tvar mx;\n\tvar my;\n\tvar C;\n\tvar N;\n\n\tC = 0.0;\n\tN = 0;\n\tif ( arguments.length ) {\n\t\tif ( !isNumber( meanx ) ) {\n\t\t\tthrow new TypeError( format( '1H949,Hq', meanx ) );\n\t\t}\n\t\tif ( !isNumber( meany ) ) {\n\t\t\tthrow new TypeError( format( '1H94A,Hr', meany ) );\n\t\t}\n\t\tmx = meanx;\n\t\tmy = meany;\n\t\treturn accumulator2;\n\t}\n\tmx = 0.0;\n\tmy = 0.0;\n\treturn accumulator1;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated unbiased sample covariance. If not provided input values, the accumulator function returns the current unbiased sample covariance.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @param {number} [y] - new value\n\t* @returns {(number|null)} unbiased sample covariance or null\n\t*/\n\tfunction accumulator1( x, y ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif ( N === 1 ) {\n\t\t\t\treturn ( isnan( C ) ) ? NaN : 0.0;\n\t\t\t}\n\t\t\treturn C / (N-1);\n\t\t}\n\t\tN += 1;\n\t\tdx = x - mx;\n\t\tmx += dx / N;\n\t\tmy += ( y-my ) / N;\n\t\tC += dx * ( y-my ); // Note: repeated `y-my` is intentional, as `my` is updated when used here\n\t\tif ( N < 2 ) {\n\t\t\treturn ( isnan( C ) ) ? NaN : 0.0;\n\t\t}\n\t\treturn C / (N-1);\n\t}\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated unbiased sample covariance. If not provided input values, the accumulator function returns the current unbiased sample covariance.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @param {number} [y] - new value\n\t* @returns {(number|null)} unbiased sample covariance or null\n\t*/\n\tfunction accumulator2( x, y ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn C / N;\n\t\t}\n\t\tN += 1;\n\t\tC += ( x-mx ) * ( y-my );\n\t\treturn C / N;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrcovariance;\n"],"names":["incrcovariance","meanx","meany","dx","mx","my","C","N","arguments","length","isNumber","TypeError","format","accumulator2","accumulator1","x","y","isnan","NaN"],"mappings":";;+RAqHA,SAASA,EAAgBC,EAAOC,GAC/B,IAAIC,EACAC,EACAC,EACAC,EACAC,EAIJ,GAFAD,EAAI,EACJC,EAAI,EACCC,UAAUC,OAAS,CACvB,IAAMC,EAAUT,GACf,MAAM,IAAIU,UAAWC,EAAQ,WAAYX,IAE1C,IAAMS,EAAUR,GACf,MAAM,IAAIS,UAAWC,EAAQ,WAAYV,IAI1C,OAFAE,EAAKH,EACLI,EAAKH,EACEW,CACP,CAGD,OAFAT,EAAK,EACLC,EAAK,EACES,EAUP,SAASA,EAAcC,EAAGC,GACzB,OAA0B,IAArBR,UAAUC,OACH,IAANF,EACG,KAEG,IAANA,EACKU,EAAOX,GAAQY,IAAM,EAExBZ,GAAKC,EAAE,IAIfH,IADAD,EAAKY,EAAIX,IADTG,GAAK,GAILD,GAAKH,GAAOa,GADZX,IAAQW,EAAEX,GAAOE,IAEZA,EAAI,EACCU,EAAOX,GAAQY,IAAM,EAExBZ,GAAKC,EAAE,GACd,CAUD,SAASM,EAAcE,EAAGC,GACzB,OAA0B,IAArBR,UAAUC,OACH,IAANF,EACG,KAEDD,EAAIC,GAGZD,IAAOS,EAAEX,IAASY,EAAEX,KADpBE,GAAK,EAGL,CACF"}